<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C &amp; C++ &amp; Data Structure Texture Lecture</title><link>https://fcuiecs.github.io/ccds/</link><description>Recent content on C &amp; C++ &amp; Data Structure Texture Lecture</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://fcuiecs.github.io/ccds/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch0/01_devcpp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch0/01_devcpp/</guid><description>Dev-C++ Dev-C++是由Bloodshed開發的一套IDE，不過自2005年初後，便不再更新，2011年由Orwell接手維護非官方版本，這邊安</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch0/02_codeblocks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch0/02_codeblocks/</guid><description>Code::Blocks Code::Blocks是本次教材中推薦使用的IDE，安裝教學使用Code::Blocks 16.01示範。 適用平台：Windows, Linux, Mac OS</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch0/03_visualstudio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch0/03_visualstudio/</guid><description>Visual Studio Visual Studio 是 Microsoft 開發的一套非常強大的IDE 這邊的教學使用 Visual Studio Community 2015 適用平台：Windows Only (Windows 7 SP1或以上) 其他平台可以參考Visual Studio Cod</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch0/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch0/Intro/</guid><description>Chapter 0：魔工鑄器 Environment 工欲善其事，必先利其器。 教學目標 瞭解IDE是什麼。 學會安裝IDE。 學會基本IDE操作。 子章節 Dev-C++ Code::Blocks Visual Studio 助教群的話 寫程式有各式各</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch1/01_history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch1/01_history/</guid><description>C語言背景 C語言的由來 C語言最早由丹尼斯·里奇（Dennis Ritchie）為了在PDP-11電腦上運行的Unix系統所設計出來的程式語言，</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch1/02_language_diff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch1/02_language_diff/</guid><description>低中高階語言 程式語言就是人與電腦溝通的橋樑， 就像世界上有很多語言，像是中文、英文、日文等等， 程式語言也有很多種，像是C、C++、Java、P</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch1/03_spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch1/03_spec/</guid><description>特性 它的特性，總歸一句話，就是沒有特性！ 由於很接近底層的組合語言，所以能做很多事情，透過指標，能夠直接控制、管理記憶體。 C語言的設計理念是把</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch1/04_newbie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch1/04_newbie/</guid><description>起手式 學習每個程式語言的第一件事情， 通常就是先做個簡單的程式來運行一下。 來寫寫上大學之後的第一支程式吧! 將指定的文字輸出到主控台上 (寫到大四</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch1/05_practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch1/05_practice/</guid><description>練習 練習1-1 請將Hello, world!印出來。 補上可能會遇到的問題，通稱Bug #include&amp;lt;xxxx.h&amp;gt;格式不對 左右括</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch1/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch1/Intro/</guid><description>Chapter 1：鑑往知來 C Intro 是故聖人見出以知入，觀往而知來，此其所以先知之理也。 教學目標 瞭解C語言的由來及背景 瞭解低中高階語言的差異 瞭解C語言與其他高</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch10/01_introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch10/01_introduction/</guid><description>C++簡介</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch10/02_inputAndOutput/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch10/02_inputAndOutput/</guid><description>輸入與輸出 輸出(cout) 如同C語言中會有的 #include &amp;lt;stdio.h&amp;gt; … return 0; ，等等必定會寫的內容一樣，以下是C++的基礎架構： 範例10-1 #include &amp;lt;iostream&amp;gt;int main(){ std::cout &amp;lt;&amp;lt; &amp;#34;Hello World!&amp;#34; &amp;lt;&amp;lt; std::endl; return 0; }</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch10/03_boolean/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch10/03_boolean/</guid><description>第六型態 布林 boolean 在C語言中，我們可能會宣告一個int作為條件判斷的變數，但我們從上一節的表格中可以看到兩者佔用空間是有所差距，int是4個by</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch10/04_string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch10/04_string/</guid><description>字串 string 接下來要介紹的是字串，在C語言中我們使用char陣列來表示字串，並使用string.h的函式對字串做處理，在C++中擁有string這</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch10/05_TernaryOperator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch10/05_TernaryOperator/</guid><description>三元運算子 此章節需要修改 在此稍微帶過三元運算子，效果可以當作if-else，只是可以一行完成，在if-else要做的事情不多時可以使用，或者</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch10/06_structAndObject/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch10/06_structAndObject/</guid><description>結構與物件 C++的struct有別於C語言，可以在其中放入function與constructor，不過我個人並不建議使用，若已有物件導向觀</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch10/07_memoryControl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch10/07_memoryControl/</guid><description>記憶體操作 本章節將重點在使用struct*進行struct陣列的實作。 在這之前我們先對指標(pointer)進行複習，也可參考本書第七章(鬼</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch10/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch10/Intro/</guid><description>Chapter 10 天元突破 C++ Intro 本章節將簡易用C++複習基本程式邏輯，並教導C和C++的不同之處，以便接下來資料結構相關課程的銜接，因為並非是物件導向課程，</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch11/01_Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch11/01_Intro/</guid><description>Chapter 11：人形蜈蚣 Linked List 中文：鏈結串列、連結串列 1.Introduction 簡介 Linked List 是資料結構的其中一種，利用節點與指標來將資料串起來，可以充分利用記憶體空間。 在 C/C++ 當中，</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch11/01_Intro_forC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch11/01_Intro_forC/</guid><description>Chapter 11：人形蜈蚣 Linked List 中文：鏈結串列、連結串列 1.Introduction 簡介 Linked List 是資料結構的其中一種，利用節點與指標來將資料串起來，可以充分利用記憶體空間。 在 C/C++ 當中，</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch11/02_Singly_Linked_List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch11/02_Singly_Linked_List/</guid><description>單向鏈結串列 Singly Linked List 1.Implementation 實作方向 在 C/C++ 當中，我們可以用 Struct（結構）來實作 Linked List。 在 C++ 當中，Struct 可以寫進方法，這個特性也讓我們實</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch11/02_Singly_Linked_List_forC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch11/02_Singly_Linked_List_forC/</guid><description>單向鏈結串列 Singly Linked List 1.Implementation 實作方向 在 C/C++ 當中，我們可以用 Struct（結構）搭配 malloc() 來實作 Linked List。 A. 定義節點 首先我們必須先定義每個 節點（Node）</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch11/03_Doubly_Linked_List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch11/03_Doubly_Linked_List/</guid><description>雙向鏈結串列 Doubly Linked List 1. What is Doubly LL? 什麼是雙向？ 前面的 Linked List 有個小問題，假如我今天要找 current 指標所指向的節點，往前兩個節點的資料時，必須要從 head 重新尋找起，</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch11/03_Doubly_Linked_List_forC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch11/03_Doubly_Linked_List_forC/</guid><description/></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch11/04_Circularly_Linked_List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch11/04_Circularly_Linked_List/</guid><description>循環鏈結串列 Circularly Linked List 1. What is Cirularly LL? 什麼是循環？ 也就是原本的最後一個節點指向第一個節點。 示意圖： 2. Implementation 實作 非常簡單，新增節點時把 next 指標指向 head 就可以了！</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch11/04_Circularly_Linked_List_forC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch11/04_Circularly_Linked_List_forC/</guid><description/></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch12/01_queue_intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch12/01_queue_intro/</guid><description>佇列 Queue 不知道各位有沒有排隊買東西的經驗呢？在沒有任何插隊、解壓縮及特權的狀況下，基本上就是先到先服務的，晚來的只好乖乖排隊等前面的離開。 佇列</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch12/02_queue_implementation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch12/02_queue_implementation/</guid><description>實作佇列 一般而言，佇列的實作有兩種方法，用陣列(array)或鏈結串列(linked list)實作，通常這兩者實做出來沒有太大的差別，唯一要</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch12/03_stack_intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch12/03_stack_intro/</guid><description>堆疊 Stack 品O、薯X先生，這幾個還算有名的洋芋片品牌，不知道各位有沒有吃過？他們的共通點都是有個長長的桶子，裡面有滿滿的洋芋片。 這些洋芋片桶子跟</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch12/04_stack_implementation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch12/04_stack_implementation/</guid><description>實作堆疊 一般而言，堆疊的實作和佇列一樣，可以用陣列(array)或鏈結串列(linked list)實作，通常這兩者實做出來沒有太大的差別，唯</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch12/05_practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch12/05_practice/</guid><description>練習 Queue (待補) Stack 請利用Stack撰寫一個走迷宮程式 請利用Stack撰寫一個中序運算式轉後序運算式的程式。 中序運算式: 1+2*3/4-5 後序運算式: 123*4/+5-</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch12/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch12/Intro/</guid><description>Chapter 12：陰陽一氣 Queue &amp;amp; Stack 堆疊之行，先進後出；佇列之行，先到先贏！ 教學目標 了解Queue原理 能夠以陣列及鏈結串列實作Queue 了解Stack原理</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch13/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch13/Intro/</guid><description>Chapter 13：木葉旋風 Tree 中文：樹 別人的樹是由下往上長，我們由上往下長。 各項樹簡介 舉凡從企業內的組織架構、家族內的族譜關係再到電腦領域中的作業系統與</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch14/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch14/Intro/</guid><description>Chapter 14：木靈迷路 Graph 各種圖簡介 Kruskal Prime Dijkstra</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch2/01_stdout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch2/01_stdout/</guid><description>標準輸出(stdout) 標準輸出，是C語言入門中一定會先學到的東西，它的意義是「將指定的字串輸出到主控台(Console)上」，一般而言我們</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch2/02_type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch2/02_type/</guid><description>基礎五型 C語言之中，型態是所有資料儲存的基本，想要儲存資料，得先分清楚型態是什麼，也因此在輸出之後，緊接而來的就是「型態」。 我們可以透過宣告</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch2/03_changable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch2/03_changable/</guid><description>伸縮自如的型態 有時候，我們總是會有特殊的需求，例如：大一點的範圍、不要負號等等，因此，C語言也提供了一些彈性的變化，讓我們來瞧一瞧這些彈性。</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch2/04_stdin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch2/04_stdin/</guid><description>標準輸入(stdin) 如果有了一個裝水的容器，卻不能填滿它，那不是很可惜嗎？ 前幾章節我們提到了，一個程式需要有輸入/計算/輸出，我們現在已經</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch2/05_practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch2/05_practice/</guid><description>練習 是非題 任何程式只要有輸入及輸出就好。 char 和 int 都是儲存的都是整數。 float 在計算時完全不會有任何誤差。 unsigned 儲存的是非正整數。 不可以在 scanf() 中使用 \a。 選</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch2/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch2/Intro/</guid><description>Chapter 2：五型殺氣 Basic I/O 基礎五型，奠定C語言基礎架構。 教學目標 學會一般程式基礎架構 瞭解C語言的輸入及輸出方式 瞭解C語言的五種型態及變化型態。 能用C</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch3/01_arithmetic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch3/01_arithmetic/</guid><description>算數運算 不同於上述幾個章節所寫的內容，在這章節我們將會開始講述一些C的基本運算。 但是本章節僅會介紹一些基礎比較常使用到的運算子，當然還有更多</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch3/02_bitComputing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch3/02_bitComputing/</guid><description>位元運算 Life is binary zeros and ones. 在這章節我們將會介紹C 語言的位元運算。 相信大家對於位元應該都已經有了基本的認識，在這種情況下再來看位元運算會比較好理解。</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch3/03_assignment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch3/03_assignment/</guid><description>指派運算 指派這個概念其實其實相當的簡單，大家其實也已經知道甚至在使用了，最基本的指派運算子其實就是「=」。 等號可以幫助我們來將右邊的值給左邊</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch3/04_boolean/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch3/04_boolean/</guid><description>布林運算 C 語言中並沒有布林*!* 布林運算 在這邊有個很重要的觀念要告訴大家，其實在C 語言中並沒有布林這型態，一定有很多同學在這邊會有疑問，那這</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch3/05_ifStatement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch3/05_ifStatement/</guid><description>判斷式 如果今天颱風假，我就在家耍廢；否則我還是得來上課。 在程式內為了運用各式各樣的狀況，判斷式這樣東西的存在是非常重要的。 為了應付這種狀況，</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch3/06_practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch3/06_practice/</guid><description>練習 練習 3-1 請輸入三個數字A、B即C 並讓程式幫你印出 以下圖片三個式子的輸出值 練習 3-2 請模擬一次性販賣機，讓使用者輸入金額，並選擇a~d四種產品，</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch3/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch3/Intro/</guid><description>Chapter 3：扮裝行列 Operation printf玩膩了?，該來一些邏輯運算了。 教學目標 各式運算式入門 基礎的運算子、運算子教學 判斷式的使用 子章節 算數運算 位元運算 指</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch4/01_loop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch4/01_loop/</guid><description>迴圈 有時候我們需要讓程式重複做某一件事情，我們可以藉由兩種方法做到，一是迴圈，二是遞迴，因為遞迴太過麻煩且不易使用所以在此不做贅述，留待未來</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch4/02_array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch4/02_array/</guid><description>陣列 陣列將同一型態同一作用的變數排在一起，請參考範例4-6。 範例4-6 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; int main(){ int i,array[5]; for(i=0;i&amp;lt;5;i++){ printf(&amp;#34;%d:&amp;#34;,i); scanf(&amp;#34;%d&amp;#34;,&amp;amp;array[i]); } printf(&amp;#34;\n&amp;#34;); for(i=0;i&amp;lt;5;i++){ printf(&amp;#34;%d:%d\n&amp;#34;,i,array[i]); } return 0; } 我們以int array[5]宣告出</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch4/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch4/Intro/</guid><description>Chapter 4：循環演算 Loop &amp;amp; Array</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch5/01_string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch5/01_string/</guid><description>字串 在大部分語言中，字串會使用string類別儲存，在C語言中則是用char陣列表示，再使用printf(&amp;quot;%s&amp;quot;,st</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch5/02_bignumber/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch5/02_bignumber/</guid><description/></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch5/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch5/Intro/</guid><description>Chapter 5：情報強化 String</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch6/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch6/Intro/</guid><description>Chapter 6：三千世界 Functions 中文：副程式、副函式、函式、函數 一、Introduction 介紹 一般來說，程式啟動時從程式進入點開始，即 main 的所在位置，從以前</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch7/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch7/Intro/</guid><description>Chapter 7：鬼門遁甲 Pointer 中文：指標 一、Introduction 介紹 指標，是 C 語言中最強而有力的一項特性，也是最多人放棄的一個地方。指標有強力，而且高</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch8/01_basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch8/01_basic/</guid><description>基礎結構 在Ｃ語言中，我們可以利用結構來做很多事情，不過結構到底是啥呢？ 為何要用結構？ 在先前寫的一些範例中，我們的程式會有越來越多的變數宣告，</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch8/02_operation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch8/02_operation/</guid><description>結構操作 一般的結構變數，可以直接將結構變數當成一般變數來使用。 成員取值 如果我們想要取得一個結構變數中的成員的值，可以運用「 . 」這個運算子，以</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch8/03_ptr_structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch8/03_ptr_structure/</guid><description>結構指標 又是指標？ 沒錯，又是指標！ 在Ｃ語言中，結構也可以定義指標，我們稱它為「結構指標」，結構指標是我們未來實作一些「資料結構」的基礎。 指標</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch8/04_practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch8/04_practice/</guid><description>練習 練習 8-1 請試著用結構宣告一個球，這顆球包括他的半徑、顏色。 練習 8-2 以練習 8-1 的結構，完成「計算球體積」、「計算球表面積」這兩個函式。</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch8/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch8/Intro/</guid><description>Chapter 8：七夜怪談 Structure 教學目標 瞭解結構存在的意義 瞭解結構如何宣告及使用。 能將結構用在日常的程式練習中。 子章節 基礎結構 結構操作 結構指標 練習</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/Ch9/Intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/Ch9/Intro/</guid><description>Chapter 9：剪紙成兵 File I/O 檔案處理 C本身提供了許多檔案的輸入與輸出，以方便使用者設計與檔案有關的系統函數。 其中包含了開檔、讀檔以及寫檔&amp;hellip</description></item><item><title/><link>https://fcuiecs.github.io/ccds/docs/summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fcuiecs.github.io/ccds/docs/summary/</guid><description/></item></channel></rss>